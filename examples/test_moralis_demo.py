#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Moralis Web3 Data API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.

–≠—Ç–æ—Ç —Ñ–∞–π–ª –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é Moralis API –≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É aiochainscan
—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–ª—é—á–µ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: –±–∞–ª–∞–Ω—Å, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, —Ç–æ–∫–µ–Ω—ã.
"""

import asyncio
import os

from aiochainscan.core.client import ChainscanClient
from aiochainscan.core.method import Method


async def test_moralis_balance():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ Moralis API."""

    print('üí∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞\n')

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    api_key = os.getenv('MORALIS_KEY')
    if not api_key:
        print('‚ùå MORALIS_KEY environment variable not set')
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: export MORALIS_KEY='your_moralis_api_key'")
        return False

    # –¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é (Vitalik Buterin)
    test_address = '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045'

    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è Ethereum
        client = ChainscanClient(
            scanner_name='moralis',
            scanner_version='v1',
            api_kind='moralis',
            network='eth',
            api_key=api_key,
        )

        print(f'‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {client}')
        print('üîó –°–µ—Ç—å: Ethereum (chain: 0x1)')
        print(f'üìç –ê–¥—Ä–µ—Å: {test_address}')

        # –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞
        print('\nüîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å...')
        balance = await client.call(Method.ACCOUNT_BALANCE, address=test_address)

        print('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –±–∞–ª–∞–Ω—Å!')
        print(f'   Raw balance: {balance}')

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ ETH –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        if isinstance(balance, int | str):
            balance_wei = int(balance)
            balance_eth = balance_wei / 10**18
            print(f'   üí∞ –ë–∞–ª–∞–Ω—Å: {balance_eth:.6f} ETH')
            print(f'   üí∞ –ë–∞–ª–∞–Ω—Å: {balance_wei:,} wei')

        await client.close()
        return True

    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –±–∞–ª–∞–Ω—Å–∞: {e}')
        return False


async def test_moralis_transactions():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π."""

    print('\nüìÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n')

    api_key = os.getenv('MORALIS_KEY')
    if not api_key:
        print('‚ùå MORALIS_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
        return False

    # –ê–¥—Ä–µ—Å —Å –±–æ–ª—å—à–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (Vitalik Buterin)
    test_address = '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045'

    try:
        client = ChainscanClient(
            scanner_name='moralis',
            scanner_version='v1',
            api_kind='moralis',
            network='eth',
            api_key=api_key,
        )

        print(f'üìç –ê–¥—Ä–µ—Å: {test_address}')
        print('üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...')

        # –ó–∞–ø—Ä–æ—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        transactions = await client.call(Method.ACCOUNT_TRANSACTIONS, address=test_address)

        print('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!')
        print(f'   Raw response type: {type(transactions)}')

        if isinstance(transactions, list):
            print(f'   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(transactions)}')

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            for i, tx in enumerate(transactions[:3]):
                print(f'\n   üìÑ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {i + 1}:')
                if isinstance(tx, dict):
                    print(f'      Hash: {tx.get("hash", "N/A")}')
                    print(f'      From: {tx.get("from", "N/A")}')
                    print(f'      To: {tx.get("to", "N/A")}')
                    print(f'      Value: {tx.get("value", "N/A")}')
                    print(f'      Block: {tx.get("block_number", "N/A")}')
                else:
                    print(f'      {tx}')

        elif isinstance(transactions, dict):
            print(f'   üìã Response keys: {list(transactions.keys())}')
            if 'result' in transactions:
                result = transactions['result']
                if isinstance(result, list):
                    print(f'   üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ result: {len(result)}')

        await client.close()
        return True

    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}')
        print(f'   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}')
        return False


async def test_moralis_tokens():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –∫–æ—à–µ–ª—å–∫–∞."""

    print('\nü™ô –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∫–æ—à–µ–ª—å–∫–∞\n')

    api_key = os.getenv('MORALIS_KEY')
    if not api_key:
        print('‚ùå MORALIS_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
        return False

    # –ê–¥—Ä–µ—Å —Å —Ç–æ–∫–µ–Ω–∞–º–∏ (Vitalik Buterin)
    test_address = '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045'

    try:
        client = ChainscanClient(
            scanner_name='moralis',
            scanner_version='v1',
            api_kind='moralis',
            network='eth',
            api_key=api_key,
        )

        print(f'üìç –ê–¥—Ä–µ—Å: {test_address}')
        print('üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã...')

        # –ó–∞–ø—Ä–æ—Å —Ç–æ–∫–µ–Ω–æ–≤
        tokens = await client.call(Method.TOKEN_BALANCE, address=test_address)

        print('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã!')
        print(f'   Raw response type: {type(tokens)}')

        if isinstance(tokens, list):
            print(f'   ü™ô –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: {len(tokens)}')

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤
            for i, token in enumerate(tokens[:5]):
                print(f'\n   ü™ô –¢–æ–∫–µ–Ω {i + 1}:')
                if isinstance(token, dict):
                    print(f'      Symbol: {token.get("symbol", "N/A")}')
                    print(f'      Name: {token.get("name", "N/A")}')
                    print(f'      Balance: {token.get("balance", "N/A")}')
                    print(f'      Decimals: {token.get("decimals", "N/A")}')
                    print(f'      Contract: {token.get("token_address", "N/A")}')
                else:
                    print(f'      {token}')

        elif isinstance(tokens, dict):
            print(f'   üìã Response keys: {list(tokens.keys())}')

        await client.close()
        return True

    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç–æ–∫–µ–Ω–æ–≤: {e}')
        return False


async def test_multi_chain_balance():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º—É–ª—å—Ç–∏-—á–µ–π–Ω —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."""

    print('\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º—É–ª—å—Ç–∏-—á–µ–π–Ω —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏\n')

    api_key = os.getenv('MORALIS_KEY')
    if not api_key:
        print('‚ùå MORALIS_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
        return False

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ—Ç–∏
    networks = {'eth': '0x1', 'bsc': '0x38', 'polygon': '0x89', 'base': '0x2105'}

    test_address = '0x742d35Cc6634C0532925a3b8D9fa7a3D91D1e9b3'

    for network, chain_id in networks.items():
        print(f'üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º {network.upper()} (chain: {chain_id})...')

        try:
            client = ChainscanClient(
                scanner_name='moralis',
                scanner_version='v1',
                api_kind='moralis',
                network=network,
                api_key=api_key,
            )

            balance = await client.call(Method.ACCOUNT_BALANCE, address=test_address)

            if isinstance(balance, int | str):
                balance_wei = int(balance)
                balance_native = balance_wei / 10**18
                print(f'   ‚úÖ –ë–∞–ª–∞–Ω—Å: {balance_native:.6f} –Ω–∞—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤')
            else:
                print(f'   ‚úÖ –ë–∞–ª–∞–Ω—Å: {balance}')

            await client.close()

        except Exception as e:
            print(f'   ‚ùå {network}: {e}')


async def compare_with_etherscan():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Moralis —Å Etherscan."""

    print('\n‚öñÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ Moralis vs Etherscan\n')

    moralis_key = os.getenv('MORALIS_KEY')
    etherscan_key = os.getenv('ETHERSCAN_KEY')

    if not moralis_key:
        print('‚ùå MORALIS_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
        return

    if not etherscan_key:
        print('‚ùå ETHERSCAN_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å Moralis')
        return

    test_address = '0x742d35Cc6634C0532925a3b8D9fa7a3D91D1e9b3'

    try:
        # Moralis
        print('üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ Moralis...')
        moralis_client = ChainscanClient(
            scanner_name='moralis',
            scanner_version='v1',
            api_kind='moralis',
            network='eth',
            api_key=moralis_key,
        )

        moralis_balance = await moralis_client.call(Method.ACCOUNT_BALANCE, address=test_address)
        await moralis_client.close()

        # Etherscan
        print('üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ Etherscan...')
        etherscan_client = ChainscanClient(
            scanner_name='etherscan',
            scanner_version='v1',
            api_kind='eth',
            network='main',
            api_key=etherscan_key,
        )

        etherscan_balance = await etherscan_client.call(
            Method.ACCOUNT_BALANCE, address=test_address
        )
        await etherscan_client.close()

        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
        print('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:')
        print(f'   Moralis:   {moralis_balance}')
        print(f'   Etherscan: {etherscan_balance}')

        if str(moralis_balance) == str(etherscan_balance):
            print('   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç!')
        else:
            print('   ‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ª–∏—á–∞—é—Ç—Å—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑-–∑–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—Ä–æ—Å–∞)')

    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏: {e}')


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""

    print('üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Moralis Web3 Data API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏')
    print('=' * 60)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–∞
    api_key = os.getenv('MORALIS_KEY')
    if not api_key:
        print('\n‚ùå –î–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–µ–º–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º API –∫–ª—é—á Moralis')
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: export MORALIS_KEY='your_moralis_api_key'")
        print('   –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á: https://admin.moralis.io/')
        return

    print(f'‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:8]}...')

    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    results = []

    results.append(await test_moralis_balance())
    results.append(await test_moralis_transactions())
    results.append(await test_moralis_tokens())
    await test_multi_chain_balance()
    await compare_with_etherscan()

    # –ò—Ç–æ–≥–∏
    print('\n' + '=' * 60)
    print('üìä –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:')

    successful_tests = sum(results)
    total_tests = len(results)

    print(f'   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {successful_tests}/{total_tests}')

    if successful_tests == total_tests:
        print('   üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!')
        print('   üîó Moralis API –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ aiochainscan')
    else:
        print('   ‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏')
        print('   üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É')

    print('\n‚ú® –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')


if __name__ == '__main__':
    asyncio.run(main())
