name: Test Installation

on:
  push:
    branches: [main, develop, real-using-test]
  pull_request:
    branches: [main, develop]

jobs:
  test-wheel-install:
    name: Test Wheel Installation (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build wheel setuptools

      - name: Build wheel
        run: python -m build

      - name: Test wheel installation in clean environment
        run: |
          # Create a fresh virtual environment
          python -m venv /tmp/test-env
          source /tmp/test-env/bin/activate

          # Install the built wheel
          pip install dist/*.whl

          # Verify package can be imported
          python -c "import aiochainscan; print('✓ Package imported successfully')"

          # Verify version
          python -c "import aiochainscan; print(f'✓ Version: {aiochainscan.__version__}')"

          # Verify main modules
          python -c "from aiochainscan import Client, ChainscanClient; print('✓ Main classes imported')"

          # Verify facade imports
          python -c "from aiochainscan import get_balance, get_block, get_transaction; print('✓ Facades imported')"

          # Verify CLI is available
          which aiochainscan || echo "⚠ CLI not found"
          aiochainscan --help || echo "⚠ CLI help failed"

          deactivate

      - name: Test source distribution installation
        run: |
          # Create another fresh virtual environment
          python -m venv /tmp/test-sdist
          source /tmp/test-sdist/bin/activate

          # Install from source distribution
          pip install dist/*.tar.gz

          # Verify package works
          python -c "import aiochainscan; print('✓ Source distribution works')"

          deactivate

      - name: Test editable install
        run: |
          # Test development install
          python -m venv /tmp/test-editable
          source /tmp/test-editable/bin/activate

          pip install -e .

          # Verify editable install
          python -c "import aiochainscan; print('✓ Editable install works')"

          deactivate

  test-git-install:
    name: Test Git Installation (Python 3.11)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Test direct git install
        run: |
          # Simulate user installing from GitHub
          python -m venv /tmp/test-git
          source /tmp/test-git/bin/activate

          # Install from current directory (simulates git+https://...)
          pip install .

          # Verify installation
          python -c "import aiochainscan; print('✓ Git install successful')"
          python -c "from aiochainscan import *; print('✓ All imports successful')"

          # List installed files to verify Python modules are present
          pip show -f aiochainscan | grep -E '(aiochainscan/.*\.py|Location:)' | head -20

          deactivate

  test-dependencies:
    name: Test Dependencies (Python 3.11)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Build and install
        run: |
          python -m pip install --upgrade pip build
          python -m build
          pip install dist/*.whl

      - name: Check dependencies are installed
        run: |
          python -c "import aiohttp; print('✓ aiohttp')"
          python -c "import asyncio_throttle; print('✓ asyncio_throttle')"
          python -c "import aiohttp_retry; print('✓ aiohttp_retry')"
          python -c "import eth_abi; print('✓ eth_abi')"
          python -c "import structlog; print('✓ structlog')"

      - name: Verify package structure
        run: |
          python -c "
          import aiochainscan
          import os
          pkg_path = os.path.dirname(aiochainscan.__file__)
          print(f'Package location: {pkg_path}')

          # Check for key modules
          modules = ['client', 'config', 'network', 'core', 'services', 'adapters', 'ports', 'domain']
          for mod in modules:
              mod_path = os.path.join(pkg_path, mod + '.py')
              dir_path = os.path.join(pkg_path, mod)
              if os.path.exists(mod_path) or os.path.isdir(dir_path):
                  print(f'✓ {mod} exists')
              else:
                  print(f'✗ {mod} missing')
          "
